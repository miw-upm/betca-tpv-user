name: CD
on:
  push:
    branches:
      - master
jobs:
  cd:
    name: Build & Push GitHub Package & Deploy on Render Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
      - name: Get version from pom.xml
        id: get-version
        # REPOSITORY: nombre del repositorio
        # IMAGE_NAME: ruta de los paquetes de destino
        # VERSION: versión sacado del fichero POM
        run: |
          echo "REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
          echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
          echo "IMAGE_NAME=ghcr.io/${{ github.repository }}" >> $GITHUB_ENV
      - name: Show NAMES
        run: |
          echo $REPOSITORY
          echo $VERSION
          echo $IMAGE_NAME

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io #GitHub Container Registry
          username: ${{ github.actor }}  # Utiliza el contexto para obtener el nombre del autor
          # 1º Creación del Token de Acceso Personal
          #    Cuenta de GitHub >> Developer settings >> Personal access tokens >> Tokens >> Generate new token
          #    write:packages & read:packages delete:packages & repo
          # 2º Configuración de Secrets en GitHub
          #    repositorio en GitHub >> settings >> secrets and variables >> actions >> new repository secret
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      - name: Build and Tag and Push Docker image
        # docker build se construye la imagen de docker a partir del fichero Dockerfile
        # docker tag: se etiqueta la imagen con la versión actual y se establece que es la última
        run: |
          docker build -t $REPOSITORY:$VERSION .
          docker tag $REPOSITORY:$VERSION $IMAGE_NAME:$VERSION
          docker tag $REPOSITORY:$VERSION $IMAGE_NAME:latest
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
      - name: Push Docker image to GitHub Container Registry
        run: |
           docker push $IMAGE_NAME:$VERSION
           docker push $IMAGE_NAME:latest
      - name: Debug Environment Variables
        run: printenv
      - name: Deploy on Render
#        run: curl https://api.render.com/deploy/${{ secrets.RENDER_DEPLOY_TOKEN }}
        run: |
           curl --fail -X POST "https://api.render.com/deploy/${{ secrets.RENDER_DEPLOY_TOKEN }}" || { echo "Deployment failed"; exit 1; }
           echo "Deployment succeeded"